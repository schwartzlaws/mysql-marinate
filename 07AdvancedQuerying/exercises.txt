Even though on page 238 the book says it does not matter if you put 
JOIN conditions in ON or WHERE clauses, the advantage to putting them 
in the ON clause is that it is easy to see if you missed a JOIN clause. 
It is also required in some outer join situations (LEFT or RIGHT joins).

For these exercises, use the "music" database.

1) Write a JOIN query that displays the name of each artist and the albums
they've made. Alongside the album, display the number of tracks on the album.

mysql> SELECT artist_name, album_name, COUNT(*) FROM artist INNER JOIN album USING (artist_id) INNER JOIN track USING (artist_id, album_id) GROUP BY artist.artist_id, album.album_id;
+---------------------------+------------------------------------------+----------+
| artist_name               | album_name                               | COUNT(*) |
+---------------------------+------------------------------------------+----------+
| New Order                 | Retro - John McCready FAN                |       15 |
| New Order                 | Substance (Disc 2)                       |       12 |
| New Order                 | Retro - Miranda Sawyer POP               |       14 |
| New Order                 | Retro - New Order / Bobby Gillespie LIVE |       15 |
| New Order                 | Power, Corruption & Lies                 |        8 |
| New Order                 | Substance 1987 (Disc 1)                  |       12 |
| New Order                 | Brotherhood                              |       10 |
| Nick Cave & The Bad Seeds | Let Love In                              |       10 |
| Miles Davis               | Live Around The World                    |       11 |
| Miles Davis               | In A Silent Way                          |        2 |
| The Rolling Stones        | Exile On Main Street                     |       18 |
| The Stone Roses           | Second Coming                            |       13 |
| Kylie Minogue             | Light Years                              |       13 |
+---------------------------+------------------------------------------+----------+
13 rows in set (0.01 sec)


2) Repeat Question 1, but now display only those albums that have more
than 10 tracks

mysql> SELECT artist_name, album_name, COUNT(*) FROM artist INNER JOIN album USING (artist_id) INNER JOIN track USING (artist_id, album_id) GROUP BY artist.artist_id, album.album_id HAVING COUNT(*) >= 10;
+---------------------------+------------------------------------------+----------+
| artist_name               | album_name                               | COUNT(*) |
+---------------------------+------------------------------------------+----------+
| New Order                 | Retro - John McCready FAN                |       15 |
| New Order                 | Substance (Disc 2)                       |       12 |
| New Order                 | Retro - Miranda Sawyer POP               |       14 |
| New Order                 | Retro - New Order / Bobby Gillespie LIVE |       15 |
| New Order                 | Substance 1987 (Disc 1)                  |       12 |
| New Order                 | Brotherhood                              |       10 |
| Nick Cave & The Bad Seeds | Let Love In                              |       10 |
| Miles Davis               | Live Around The World                    |       11 |
| The Rolling Stones        | Exile On Main Street                     |       18 |
| The Stone Roses           | Second Coming                            |       13 |
| Kylie Minogue             | Light Years                              |       13 |
+---------------------------+------------------------------------------+----------+
11 rows in set (0.01 sec)


3) Repeat Question 1, but write it as a nested query.

SELECT artist_name, album_name, track_tot FROM (SELECT artist_name, album_name, max(track_id)+1 AS track_tot FROM track INNER JOIN album USING (artist_id, album_id) INNER JOIN artist USING (artist_id) GROUP BY album_id, artist_id) AS alb;
+---------------------------+------------------------------------------+-----------+
| artist_name               | album_name                               | track_tot |
+---------------------------+------------------------------------------+-----------+
| New Order                 | Retro - John McCready FAN                |        15 |
| Nick Cave & The Bad Seeds | Let Love In                              |        10 |
| Miles Davis               | Live Around The World                    |        11 |
| The Rolling Stones        | Exile On Main Street                     |        18 |
| The Stone Roses           | Second Coming                            |        13 |
| Kylie Minogue             | Light Years                              |        13 |
| New Order                 | Substance (Disc 2)                       |        12 |
| Miles Davis               | In A Silent Way                          |         2 |
| New Order                 | Retro - Miranda Sawyer POP               |        14 |
| New Order                 | Retro - New Order / Bobby Gillespie LIVE |        15 |
| New Order                 | Power, Corruption & Lies                 |         8 |
| New Order                 | Substance 1987 (Disc 1)                  |        12 |
| New Order                 | Brotherhood                              |        10 |
+---------------------------+------------------------------------------+-----------+
13 rows in set (0.02 sec)

4) What are the four types of nested queries? For each type, write a sample
query on the music database. Try to use different keywords in each query,
selecting from ANY, ALL, EXISTS (or NOT EXISTS) and IN (or NOT IN).

TYPE #1: SCALAR OPERAND (single value)

select track_id from track INNER JOIN played USING(artist_id, album_id, track_id) WHERE played = (SELECT MAX(played) from played);
+----------+
| track_id |
+----------+
|        2 |
+----------+
1 row in set (0.02 sec)


TYPE #2: COLUMN

mysql> SELECT producer_name, years FROM producer WHERE producer_name = ANY (SELECT engineer_name FROM engineer);
+---------------+-------+
| producer_name | years |
+---------------+-------+
| George Martin |    40 |
+---------------+-------+
1 row in set (0.01 sec)


TYPE #3: ROW

mysql> SELECT engineer_name, years FROM engineer WHERE (engineer_name, years) IN (SELECT producer_name, years FROM producer);
+---------------+-------+
| engineer_name | years |
+---------------+-------+
| George Martin |    40 |
+---------------+-------+
1 row in set (0.01 sec)


mysql> SELECT album_name FROM album WHERE EXISTS (SELECT * FROM artist WHERE artist_name = "Smiths");
Empty set (0.00 sec)



TYPE #4: CORRELATED

mysql> SELECT artist_name FROM artist WHERE EXISTS (SELECT * FROM album WHERE artist.artist_id = album.artist_id GROUP BY artist.artist_id HAVING COUNT(*) < 2);
+---------------------------+
| artist_name               |
+---------------------------+
| Nick Cave & The Bad Seeds |
| The Rolling Stones        |
| The Stone Roses           |
| Kylie Minogue             |
+---------------------------+
4 rows in set (0.02 sec)

5) What is the difference between an INNER JOIN, a LEFT JOIN, and a RIGHT
JOIN? Does the the order of tables matter in an INNER JOIN? Why or why not?

INNER JOIN - only matches and outputs results when rows match between tables after a join.
LEFT JOIN - each row on the left table is processed and output, regardless of a match on the right table (if blank, a NULL is returned)
RIGHT JOIN - similar to above, but driven by the table on the right

For INNER JOIN the order doesn't matter. 


6) Why do these queries give different results? What does this tell you
about using join conditions in the ON clause versus in the WHERE clause
for LEFT (and RIGHT) JOINs?

<<<<<<< HEAD
SELECT track_name, track.artist_id, COUNT(played) 
FROM track 
LEFT JOIN played ON (track.artist_id=played.artist_id 
          AND track.album_id=played.album_id) 
WHERE track.artist_id=3 
GROUP BY track_name;

+--------------------------------------+-----------+---------------+
| track_name                           | artist_id | COUNT(played) |
+--------------------------------------+-----------+---------------+
| Amandla                              |         3 |             3 |
| Full Nelson                          |         3 |             3 |
| Hannibal                             |         3 |             3 |
| Human Nature                         |         3 |             3 |
| In A Silent Way                      |         3 |             3 |
| In A Silent Way/It's About That Time |         3 |             0 |
| Intruder                             |         3 |             3 |
| Mr. Pastorius                        |         3 |             3 |
| New Blues                            |         3 |             3 |
| Shhh/Peaceful                        |         3 |             0 |
| Time After Time                      |         3 |             3 |
| Tutu                                 |         3 |             3 |
| Wrinkle                              |         3 |             3 |
+--------------------------------------+-----------+---------------+
13 rows in set (0.01 sec)


SELECT track_name, track.album_id, COUNT(played) 
FROM track 
LEFT JOIN played ON (track.artist_id=played.artist_id) 
WHERE track.album_id=played.album_id 
      AND track.artist_id=3 
GROUP BY track_name;

+-----------------+----------+---------------+
| track_name      | album_id | COUNT(played) |
+-----------------+----------+---------------+
| Amandla         |        1 |             3 |
| Full Nelson     |        1 |             3 |
| Hannibal        |        1 |             3 |
| Human Nature    |        1 |             3 |
| In A Silent Way |        1 |             3 |
| Intruder        |        1 |             3 |
| Mr. Pastorius   |        1 |             3 |
| New Blues       |        1 |             3 |
| Time After Time |        1 |             3 |
| Tutu            |        1 |             3 |
| Wrinkle         |        1 |             3 |
+-----------------+----------+---------------+
11 rows in set (0.00 sec)

ANSWER:

In the first case one is picking up items from album_id = 2 (where some counts are zero), and in the second case, it is only from album_id = 1:

mysql> SELECT track_name, track.album_id, track.artist_id, COUNT(played) FROM track LEFT JOIN played ON (track.artist_id=played.artist_id AND track.album_id=played.album_id) WHERE track.artist_id=3 GROUP BY track_name;
+--------------------------------------+----------+-----------+---------------+
| track_name                           | album_id | artist_id | COUNT(played) |
+--------------------------------------+----------+-----------+---------------+
| Amandla                              |        1 |         3 |             3 |
| Full Nelson                          |        1 |         3 |             3 |
| Hannibal                             |        1 |         3 |             3 |
| Human Nature                         |        1 |         3 |             3 |
| In A Silent Way                      |        1 |         3 |             3 |
| In A Silent Way/It's About That Time |        2 |         3 |             0 |
| Intruder                             |        1 |         3 |             3 |
| Mr. Pastorius                        |        1 |         3 |             3 |
| New Blues                            |        1 |         3 |             3 |
| Shhh/Peaceful                        |        2 |         3 |             0 |
| Time After Time                      |        1 |         3 |             3 |
| Tutu                                 |        1 |         3 |             3 |
| Wrinkle                              |        1 |         3 |             3 |
+--------------------------------------+----------+-----------+---------------+

mysql> SELECT track_name, track.album_id, track.artist_id, COUNT(played) FROM track LEFT JOIN played ON (track.artist_id=played.artist_id) WHERE track.album_id=played.album_id AND track.artist_id=3 GROUP BY track_name;
+-----------------+----------+-----------+---------------+
| track_name      | album_id | artist_id | COUNT(played) |
+-----------------+----------+-----------+---------------+
| Amandla         |        1 |         3 |             3 |
| Full Nelson     |        1 |         3 |             3 |
| Hannibal        |        1 |         3 |             3 |
| Human Nature    |        1 |         3 |             3 |
| In A Silent Way |        1 |         3 |             3 |
| Intruder        |        1 |         3 |             3 |
| Mr. Pastorius   |        1 |         3 |             3 |
| New Blues       |        1 |         3 |             3 |
| Time After Time |        1 |         3 |             3 |
| Tutu            |        1 |         3 |             3 |
| Wrinkle         |        1 |         3 |             3 |
+-----------------+----------+-----------+---------------+

What appears to be happening in the first case is that as long as anything from album_id = 2 was played (in this case, one song, "confusion", was played by artist_id = 1 8 times) than then it also drags along any results for artist _id = 3 on that album, whether artist_id = 3's track was played or not. 

Or, in more general term, by having this in the join clause, anytime an artist is found on the played list AND it is noted that they were on an album that was played, they are included. 

In the second case we pull all the artists that were played based on a WHERE check where the album also has to be played.

The second case yields more restrictive (narrow) results.  

=======
SELECT track_name, track.album_id, COUNT(played) 
FROM track
LEFT JOIN played ON (track.track_id=played.track_id 
AND track.album_id=played.album_id)
WHERE track.artist_id=3
GROUP BY track_name, track.album_id;

SELECT track_name, track.album_id, COUNT(played)
FROM track
LEFT JOIN played ON (track.album_id=played.album_id)
WHERE track.track_id=played.track_id
AND track.artist_id=3
GROUP BY track_name, track.album_id;
>>>>>>> upstream/master
